[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pystorm"
dynamic = ["version"]
description = "Battle-tested Apache Storm Multi-Lang implementation for Python."
readme = "README.rst"
license = {text = "Apache License 2.0"}
authors = [
    {name = "Parsely, Inc.", email = "hello@parsely.com"}
]
maintainers = [
    {name = "Automattic", email = "hello@automattic.com"}
]
keywords = ["storm", "streaming", "apache", "real-time"]

requires-python = ">=3.9"
dependencies = [
    "six>=1.5",
    "simplejson>=2.2.0",
]

[project.optional-dependencies]
test = [
    "coverage",
    "coveralls",
    "pytest",
    "pytest-cov",
    "pytest-timeout",
]
docs = [
    "sphinx",
]
lint = [
    "ruff",
]
all = [
    "six>=1.5",
    "simplejson>=2.2.0",
    "coverage",
    "coveralls",
    "pytest",
    "pytest-cov",
    "pytest-timeout",
]

[tool.uv]
dev-dependencies = [
    "coverage",
    "coveralls",
    "pytest",
    "pytest-cov",
    "pytest-timeout",
    "ruff",
    "sphinx",
]

[project.urls]
Homepage = "https://github.com/pystorm/pystorm"
Documentation = "http://pystorm.readthedocs.org/"
Repository = "https://github.com/pystorm/pystorm"
"Bug Tracker" = "https://github.com/pystorm/pystorm/issues"

[tool.hatch.build.targets.wheel]
packages = ["pystorm"]

[tool.hatch.version]
path = "pystorm/version.py" 

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--timeout=30",
]
timeout = 30

[tool.coverage.run]
source = ["pystorm"]
omit = [
    "*/test/*",
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # "Unused" module-level imports are ok, actually
]
